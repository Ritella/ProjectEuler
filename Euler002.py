# Each new term in the Fibonacci sequence is generated by adding
# the previous two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed
# four million, find the sum of the even-valued terms.


n = 4000000

def main(n):
    fib_nums = make_fibs(n)
    even_fib_sum = sum_even_fibs(fib_nums)
    print(even_fib_sum)

def make_fibs(n):
    fib_nums = [1,1]
    while fib_nums[-1] <= n:
        next_num = fib_nums[-1] + fib_nums[-2]
        if next_num <= n:
            fib_nums.append(next_num)
        else:
            break
    return fib_nums

def sum_even_fibs(fib_num_list):
    even_num_idxs = [1 - (x % 2) for x in fib_num_list]
    even_nums = list(map(lambda x,y:x*y, fib_num_list, even_num_idxs)) # pay attention
    return sum(even_nums)

main(n)


# NOTE: Questions that came up and their solution:
# adding a scalar to a list: new_list = [x+1 for x in my_list]
# you cannot multiply two list

# need to use numpy as import numpy as np, setup as np.array and then
# a * b or do np.multiply(a,b)
# could also use lists with a map function
# https://stackoverflow.com/questions/10271484/how-to-perform-element-wise-multiplication-of-two-lists-in-python
# this is another way to slice even numbered indices:
# map(lambda index: arr[index],filter(lambda x: x%n == 0,range(len(arr))))
# for indices could have done [::2]
# need to recast map back to list
