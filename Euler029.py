# Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

# 2^2=4, 2^3=8, 2^4=16, 2^5=32
# 3^2=9, 3^3=27, 3^4=81, 3^5=243
# 4^2=16, 4^3=64, 4^4=256, 4^5=1024
# 5^2=25, 5^3=125, 5^4=625, 5^5=3125
# If they are then placed in numerical order, with any repeats removed,
# we get the following sequence of 15 distinct terms:

# 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

# How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100
# and 2 ≤ b ≤ 100?

max_num = 100

all_nums = [a**b for a in range(2, max_num + 1) for b in range(2, max_num + 1)]
all_nums.sort()
all_nums_shift = all_nums[:]
all_nums_shift.pop(0)  # remove first element to shift
all_nums_shift.append(0) # add elmt to the end of shift so last elmt is included

all_unique_nums = [1 for x, y in zip(all_nums, all_nums_shift) if x != y ]

print(sum(all_unique_nums))


# NOTE:
# remember to write range(2, max_num + 1) and not just (2, max_num + 1)
# alternative solution would have used 'if not all_nums.get(value, 0)''
# or 'if value not in all_nums'
# Look at the 2 ways of doing list enumeration. Order changes if including
# an else branch b/c you need to front the 'do something' portion
# sorting and removing all multiples once is quicker than
# checking if multiple with every new addition
# since entire array would be checked each time
# all_unique_nums = [1 if x != y else 0 for x, y in zip(all_nums, all_nums_shift)]
